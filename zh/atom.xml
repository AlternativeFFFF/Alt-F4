<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Alternative Friday Factorio Fan Facts</title>
  <link href="https://alt-f4.blog/zh/atom.xml" rel="self" />
  <id>https://alt-f4.blog</id>
  <updated>2021-05-14T11:24:16+00:00</updated>
  <author>
    <name>Therenas</name>
    <uri>https://alt-f4.blog/about</uri>
    <email>AlternativeFridayFacts@gmail.com</email>
  </author>
  
  
  <entry>
    <title>Alt-F4 #35 - 好兄弟你有去过健身房么？</title>
    <link href="https://alt-f4.blog/zh/ALTF4-35/" />
    <id>https://alt-f4.blog/ALTF4-35</id>
    <updated>2021-05-14T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;作为 5 月中旬的流行趋势，请让 Alt-F4 第 35 期在这里为您养眼。本期，&lt;em&gt;Romner&lt;/em&gt; 对为什么异星工厂的工程师比我的世界的史蒂夫更牛进行了科学探索。结束这场感官盛宴的则是 &lt;em&gt;Conor_&lt;/em&gt; 给我们介绍了 &lt;em&gt;stringweasel&lt;/em&gt; 的 &lt;em&gt;名人堂（Hall of Fame）&lt;/em&gt; Mod，作者&lt;em&gt;绝对&lt;/em&gt;不可能是 &lt;em&gt;nepotism&lt;/em&gt;。&lt;/p&gt; &lt;h2 id=&quot;工程师那挑战物理学的力量-romner&quot;&gt;工程师那挑战物理学的力量 &lt;author&gt;Romner&lt;/author&gt;&lt;/h2&gt; &lt;p&gt;我的世界里的史蒂夫很强壮。&lt;a href=&quot;https://www.reddit.com/r/Minecraft/comments/jmz6lz/actualized_maximum_weight_that_steve_can_hold/&quot;&gt;能够轻易举起数十亿千克的强壮&lt;/a&gt;。但他远不能与异星工厂的工程师 &lt;em&gt;相提并论&lt;/em&gt;。&lt;/p&gt; &lt;p&gt;假设没用任何 Mod，穿着一套能量装甲 MK2 的工程师有 120 个背包格，加上 30 个物流垃圾格，总共有 150 个可用的格子。据我所知，游戏中每个格子最重的物品是核反应堆。每个格子可以容纳 10 个反应堆，因此我们总共有 1500 个反应堆。根据&lt;a href=&quot;https://www.nextbigfuture.com/2007/07/constructing-lot-of-nuclear-power.html&quot;&gt;这篇文章&lt;/a&gt;，现代核反应堆每兆瓦使用 40 公吨的钢和 190m³ 的混凝土。异星工厂中的核反应堆可以生产 40 MW。每个！哦，还有毗邻加成，我们可以用一个等式来说明（假设有四个或更多的反应堆和 2xN 反应堆布局），其中 $n$ 是反应堆的数量，$P$ 是反应堆的基本功率输出：&lt;/p&gt; &lt;p&gt;$(n...</content>
  </entry>
  
  
  
  <entry>
    <title>Alt-F4 #34 - 我们是如何走到今天的？</title>
    <link href="https://alt-f4.blog/zh/ALTF4-34/" />
    <id>https://alt-f4.blog/ALTF4-34</id>
    <updated>2021-05-07T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;本周的第 34 期，&lt;em&gt;Nanogamer7&lt;/em&gt; 开始了一个关于异星工厂潜在起源的全新系列文章。本周的内容是深入研究这一游戏杰作的灵感来源，并在聊聊游戏设计。请留步，听我说个故事！&lt;/p&gt; &lt;h2 id=&quot;同类游戏中的佼佼者异星工厂起源-nanogamer7&quot;&gt;同类游戏中的佼佼者——异星工厂起源 &lt;author&gt;Nanogamer7&lt;/author&gt;&lt;/h2&gt; &lt;p&gt;我们都听闻异星工厂在 &lt;a href=&quot;https://steamdb.info/stats/gameratings/&quot;&gt;Steam 评分&lt;/a&gt;上的优异成绩，长期处于仅次于传送门 2 之后的第二名。显然有许多人会试图在自动化这种游戏类型中模仿其成功之处，但异星工厂本身的灵感来自哪里？它是第一个完全为自动化而设计的游戏么？还说仅仅是第一个成功做出来的游戏？这将是我在这个（可能的）系列文章的第一篇中试图回答的问题。&lt;/p&gt; &lt;h3 id=&quot;自动化的定义&quot;&gt;自动化的定义&lt;/h3&gt; &lt;p&gt;我们需要要回答的第一个难题将是到底什么是自动化。以“城市：天际线”为例，你建造你的城市，然后这个城市（理论上）将会自主运行。这里的区别是，你的工作——并非让汽车无中生有，选择目的地，通过你建造的道路自己到达那里——而是管理全局，这一点没有自动化。另一方面，在原版的我的世界中，你却可能实现自动化工作——只不过是用活塞和漏斗，而不是机械臂和传送带。通过比较这两个例子，我们可以宽泛地将自动化类定义为&lt;em&gt;“制作用于制作物品的物品”&lt;/em&gt;。&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- Spacing --&gt;&lt;/p&gt; &lt;div class=&quot;image&quot;&gt; &lt;figure&gt; &lt;img src=&quot;https://media.alt-f4.blog/ALTF4/34/minecraft-hopper.jpg&quot; alt=&quot;原版我的世界中的一个简单的冶炼设置&quot; style=&quot;max-width: ; max-height: &quot; /&gt; &lt;figcaption&gt;漏斗，我的世界中的“传送带”。在图示中，它为熔炉提供煤炭（侧面）和物品（顶部），同时将熔炼产出的资源拉到下面的箱子中。&lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- Spacing --&gt;&lt;/p&gt; &lt;p&gt;然而，这个定义还是有点模糊的。作为一个没有玩过这个游戏的人，矮人堡垒中让矮人&lt;em&gt;制造东西&lt;/em&gt;的玩法是否满足我对自动化的定义？为了本文的目的，我们假设它是。不管我们谈论的是电子电路、小麦和种子，还是木制刺钉，都算。也许将来会有其他人来进一步研究矮人堡垒&lt;em&gt;*眨眨眼*&lt;/em&gt;。&lt;/p&gt; &lt;h3 id=&quot;可以用一个-mod-来实现&quot;&gt;可以用一个 Mod 来实现&lt;/h3&gt; &lt;p&gt;我已经提到了我的世界作为自动化的一个例子，但其原版的内容根本不能与 Mod 相提并论。在 2013 年的大热之后许多技术型玩家齐聚一堂，形成了有史以来最大的 Mod 社区之一，这可能使它成为最流行的自动化样例。但这引起了我的思考，诸如建筑（BuildCraft）、工业时代（IndustrialCraft）和红石力量（Redpower）等游戏...</content>
  </entry>
  
  
  
  <entry>
    <title>Alt-F4 #33 - 原版：摇匀，不要搅拌</title>
    <link href="https://alt-f4.blog/zh/ALTF4-33/" />
    <id>https://alt-f4.blog/ALTF4-33</id>
    <updated>2021-04-30T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;在令人愉快的 Alt-F4 第 33 期中，&lt;em&gt;Villfuk02&lt;/em&gt; 介绍了他们的最新 Mod 创作。配方随机器！聚焦在需要克服的设计问题上，以制作一个真正好用的配方随机器。之后，&lt;em&gt;redlabel&lt;/em&gt; 宣布了最新的 COMFY 活动，这很可能是一个非常 &lt;em&gt;炸裂&lt;/em&gt; 的活动。&lt;/p&gt; &lt;h2 id=&quot;原版摇匀不要搅拌-villfuk02&quot;&gt;原版：摇匀，不要搅拌 &lt;author&gt;Villfuk02&lt;/author&gt;&lt;/h2&gt; &lt;p&gt;&lt;a href=&quot;https://mods.factorio.com/mod/ZRecipeRandomizer&quot;&gt;&lt;em&gt;Vill 的配方随机器（Vill’s Recipe Randomizer）&lt;/em&gt;&lt;/a&gt;的功能正如其名——它将配方随机化。乍一看，这感觉是一个非常愚蠢而且非常简单的主意。然而，一旦你试图让它变得不那么愚蠢，它很快就会变得非常复杂。&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- Spacing --&gt;&lt;/p&gt; &lt;div class=&quot;image&quot;&gt; &lt;figure&gt; &lt;img src=&quot;https://media.alt-f4.blog/ALTF4/33/spaghetti-sample.jpg&quot; alt=&quot;免费的意大利面样品&quot; style=&quot;max-width: ; max-height: &quot; /&gt; &lt;figcaption&gt;一个用掩护无人机，电闸和油料储罐制造生产科技包的工厂样例。&lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- Spacing --&gt;&lt;/p&gt; &lt;h3 id=&quot;从哪里开始的&quot;&gt;从哪里开始的&lt;/h3&gt; &lt;p&gt;我是在 2020 年 9 月开始这个项目的。当时，我试图做一个既简单又独特的...</content>
  </entry>
  
  
  
  <entry>
    <title>Alt-F4 #32 - 操作 Wireshark</title>
    <link href="https://alt-f4.blog/zh/ALTF4-32/" />
    <id>https://alt-f4.blog/ALTF4-32</id>
    <updated>2021-04-23T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;欢迎来到鲨鱼游弋的第 2⁵ 期 Alt-F4。在这个危险水域中，&lt;em&gt;The-Kool&lt;/em&gt; 在最新一集的复杂角中指导我们用好扬声器，比如用作鲨鱼警告系统！然后，&lt;em&gt;Hornwitser&lt;/em&gt; 用 Wireshark 进行了一些真正的捕鲨活动，讲述了他如何追踪游戏中遇到的网络问题的故事。拿起鱼叉，跳下水吧！&lt;/p&gt; &lt;h2 id=&quot;复杂角扬声器-the-kool&quot;&gt;复杂角：扬声器 &lt;author&gt;The Kool&lt;/author&gt;&lt;/h2&gt; &lt;p&gt;欢迎回到复杂角，在这里我们将对游戏中较少使用或较复杂的机制进行梳理，为不熟悉这些机制的人做个介绍。在这篇文章中，我们将提出三个问题：“它是什么？”，“它能提供什么效果？”，“它应该用在哪里？”。&lt;/p&gt; &lt;h3 id=&quot;它是什么&quot;&gt;它是什么？&lt;/h3&gt; &lt;p&gt;&lt;a href=&quot;https://wiki.factorio.com/Programmable_speaker/zh&quot;&gt;程控扬声器&lt;/a&gt;是个只占一格“建筑”。当连接到一个电路时，它可以根据该电路上的信号发出你将在游戏中听到的声音。你可以调整音量，为它选择一个特定的声音，告诉它无论你在多远的地方都能听到，甚至在地图上显示一个自定义警报。扬声器是通过电路技术解锁的，这在科技树中是如此之早甚至可能是你的第一个绿色科技。&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- Spacing --&gt;&lt;/p&gt; &lt;div class=&quot;image&quot;&gt; &lt;figure&gt; &lt;img src=&quot;https://media.alt-f4.blog/ALTF4/32/speaker.jpg&quot; alt=&quot;程控扬声器&quot; style=&quot;max-width: ; max-height: &quot; /&gt; &lt;figcaption&gt;它矗立与此，沐浴在荣光之中。来源：&lt;a href=&quot;https://wiki.factorio.com/File:Programmable_speaker_entity.png&quot;&gt;异星工厂 Wiki&lt;/a&gt;。&lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- Spacing --&gt;&lt;/p&gt; &lt;h3 id=&quot;它能提供什么效果&quot;&gt;它能提供什么效果？&lt;/h3&gt; &lt;p&gt;它能响！好吧，这句话有点废话。虽然扬声器因为用它们建造的&lt;a href=&quot;https://miditorio.com/&quot;&gt;乐器&lt;/a&gt;而闻名，但也有着一些实际用途。如果你把扬声器连接到你的工厂，并设置全局播放和警报图标，你就可以为任何事情设计自定义警报。你可以（而且应该！）给它一个自定义的图标和名字，因为你绝对会忘记这个响亮的警报器是用来干什么的。这是一个在整个工厂广播警报的简单方法，能够帮助你在小麻烦变成真正的大问题之前抓住警告信号。&lt;/p&gt; &lt;h3 id=&quot;它应该用在哪里&quot;&gt;它应该用在哪里？&lt;/h3&gt; &lt;p&gt;你是否曾经历过意外的电力不足，使你的煤矿采矿机放慢速度，导致你的锅炉燃料不足，最终进入停电的螺旋？试着在通往锅炉的运煤传送带旁放一个扬声器，用一根线缆将它与运煤带连接起来。一格完整的传送带可容纳 8 件物品，所以如果你将扬声器设置为在少于...</content>
  </entry>
  
  
  
  <entry>
    <title>Alt-F4 #31 - 运算器速成班</title>
    <link href="https://alt-f4.blog/zh/ALTF4-31/" />
    <id>https://alt-f4.blog/ALTF4-31</id>
    <updated>2021-04-16T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;经过一周的短休，Alt-F4 带着第 31 期又回来了。本期中，&lt;em&gt;pocarski&lt;/em&gt; 又谈到了更多在异星工厂中构建计算机逻辑的方法，这次的主题是运算器，你能发现它的使用比你想象的要简单得多。之后，&lt;em&gt;Big Community Games&lt;/em&gt; 宣布了他们下一个激动人心的活动，这次将围绕着工业革命而展开。&lt;/p&gt; &lt;h2 id=&quot;运算器以及为什么你无需畏惧它们-pocarski&quot;&gt;运算器以及为什么你无需畏惧它们 &lt;author&gt;pocarski&lt;/author&gt;&lt;/h2&gt; &lt;p&gt;在科技树中，有很多技术并不是完成游戏所必需的，因此经常被排挤。有些是可以理解的，例如和平模式下的军事科技。而另一些尽管能够提供非凡的改进但也不被考虑。信号网络就是这样一种技术，这将是我在本文中探讨的内容。&lt;/p&gt; &lt;p&gt;信号网络主要有四部分组成：线缆、常量运算器、判断运算器和算术运算器。&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- Spacing --&gt;&lt;/p&gt; &lt;div class=&quot;image&quot;&gt; &lt;img src=&quot;https://media.alt-f4.blog/ALTF4/31/combinators.jpg&quot; alt=&quot;用线缆连接的 3 种运算器&quot; style=&quot;max-width: ; max-height: &quot; /&gt; &lt;/div&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- Spacing --&gt;&lt;/p&gt; &lt;p&gt;常量运算器持续输出你设定的任何信号（也无需供电）；判断运算器在满足某个逻辑条件时输出一些信号；算术运算器进行数学运算。线缆的作用就像一种“信号云”，所有输出到线缆上的信号都可以被连接到线缆上的所有东西读取。红线和绿线的功能相同，但可以连接到同一个设备上，而不会相互干扰。&lt;/p&gt; &lt;h3 id=&quot;基本元素&quot;&gt;基本元素&lt;/h3&gt; &lt;p&gt;我们来看看三个非常简单且有着广泛应用的单运算器模块。这些模块分别是：脉冲发生器、RS 锁存器和计数器。我们先从脉冲发生器说起，它长这个样子：&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- Spacing --&gt;&lt;/p&gt; &lt;div class=&quot;image&quot;&gt; &lt;img src=&quot;https://media.alt-f4.blog/ALTF4/31/monostable.jpg&quot; alt=&quot;用算术运算器制作的脉冲发生器&quot; style=&quot;max-width: ;...</content>
  </entry>
  
  
  
  <entry>
    <title>Alt-F4 #30 - Nauvis 有约：Zisteau</title>
    <link href="https://alt-f4.blog/zh/ALTF4-30/" />
    <id>https://alt-f4.blog/ALTF4-30</id>
    <updated>2021-04-02T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;跨入了以 3 开头的数字领域，在第 30 期中 stringweasel 给 Alt-F4 带来了一点新的形式：采访，算是一个采访。他和 YouTube 上的名人 Zisteau 聊了聊他对我们这个游戏中各种话题的看法。&lt;/p&gt; &lt;h3 id=&quot;nauvis-有约zisteau-stringweasel&quot;&gt;Nauvis 有约：Zisteau &lt;author&gt;stringweasel&lt;/author&gt;&lt;/h3&gt; &lt;p&gt;谈到异星工厂，我们会想到很多知名人士。多年来，这些伟大的玩家创造了令人惊叹的内容和造物，并向更多人介绍了我们热爱的这款游戏。纪念这些玩家的一个好方法，也作为让我能与这些玩家交谈的借口，就是采访。因此，我们开始了一个新的系列文章（希望如此！）——Nauvis 有约。首先，我想谈谈一个长期帮助异星工厂及其社区的名字，名叫 &lt;a href=&quot;https://www.youtube.com/user/Zisteau&quot;&gt;Zisteau&lt;/a&gt; 的 YouTuber。我联系了他，询问能否问他几个问题，回答是“当然可以”。&lt;/p&gt; &lt;p&gt; &lt;figure&gt; &lt;video class=&quot;media&quot; width=&quot;100%&quot; height=&quot;100%&quot; style=&quot;max-width: 640px; max-height: &quot; playsinline=&quot;&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot; controls=&quot;&quot;&gt; &lt;source src=&quot;https://media.alt-f4.blog/ALTF4/30/zisteau-picture.mp4&quot; type=&quot;video/mp4&quot; /&gt; &amp;lt;/source&amp;gt; &lt;!-- &lt;source src=&quot;movie.ogg&quot; type=&quot;video/webm&quot;&gt; --&gt; &lt;!-- &lt;source...</content>
  </entry>
  
  
  
  
  
  <entry>
    <title>Alt-F4 #29 - 插件效果分享塔和无传送带</title>
    <link href="https://alt-f4.blog/zh/ALTF4-29/" />
    <id>https://alt-f4.blog/ALTF4-29</id>
    <updated>2021-03-26T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;本周第 29 期，我们又迎来了难得的双主题！首先，TheKool，继续谈论插件，通过插件效果分享塔和它们的作用来结束他的 &lt;em&gt;复杂角&lt;/em&gt; 传奇。然后，oof2win2 将用他们的 Mod &lt;em&gt;无传送带&lt;/em&gt;，为我们提供一个非常有趣的另类游戏视角。&lt;/p&gt; &lt;h2 id=&quot;复杂角插件效果分享塔-the-kool&quot;&gt;复杂角：插件效果分享塔 &lt;author&gt;The Kool&lt;/author&gt;&lt;/h2&gt; &lt;p&gt;欢迎回到“复杂角”！本周我将继续前三篇文章中讲到的插件的话题。这次我将介绍插件效果分享塔的概念，一个完全依靠插件而存在的建筑。和之前一样，我会对这个可能陌生的东西提出三个问题：“它是什么？”，“它能提供什么效果？”，“它应该用在哪里？”。我的目标是让还未曾用过的人能知道，它有多么易用。&lt;/p&gt; &lt;h3 id=&quot;插件效果分享塔是什么&quot;&gt;插件效果分享塔是什么？&lt;/h3&gt; &lt;p&gt;&lt;a href=&quot;https://wiki.factorio.com/Beacon/zh&quot;&gt;插件效果分享塔&lt;/a&gt;是一个可以放置插件的建筑，它可以将这些插件的效果扩散到附近的建筑。它占用的空间为 3x3 格，辐射范围为 9x9 格，也就是说它可以影响到三格之内的任何东西。它在常规游戏中比较晚出现，需要紫色的科研包来研究，但制作它所需的最高级原料是红色电路。一个插件效果分享塔有两个插件槽，会将槽位内的任何插件效果的一半传送给附近的建筑，同时持续消耗 480kW 的电力。&lt;/p&gt; &lt;h3 id=&quot;它们能提供什么效果&quot;&gt;它们能提供什么效果？&lt;/h3&gt; &lt;p&gt;大多数人都把插件效果分享塔看作是巨型基地的工具，这倒没错，它们对提高性能非常有效，或者说 UPS（&lt;strong&gt;U&lt;/strong&gt;pdates &lt;strong&gt;P&lt;/strong&gt;er &lt;strong&gt;S&lt;/strong&gt;econd，每秒更新数）。有了更快的机器，你只需更少的机器，更少的物品移动意味着你的计算机可以处理更大的工厂。不过，改进 UPS 远不是它们唯一的作用。&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- Spacing --&gt;&lt;/p&gt; &lt;div class=&quot;image&quot;&gt; &lt;img src=&quot;https://media.alt-f4.blog/ALTF4/29/beacons.jpg&quot; alt=&quot;围绕着组装机的插件效果分享塔，以及反之。&quot; style=&quot;max-width: ; max-height: &quot; /&gt; &lt;/div&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- Spacing --&gt;&lt;/p&gt;...</content>
  </entry>
  
  
  
  <entry>
    <title>Alt-F4 #28 - ROFL</title>
    <link href="https://alt-f4.blog/zh/ALTF4-28/" />
    <id>https://alt-f4.blog/ALTF4-28</id>
    <updated>2021-03-19T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;在三月的这个美好的一周，首次撰稿人 Ph.X 讲述了他们利用独立的模块来布置基地，并通过物流列车网络将它们连接起来的分隔系统。Ph.X 从软件开发中获得灵感和经验，将模块化编程的概念运用到异星工厂之中。&lt;/p&gt; &lt;p&gt;另外，还有个新闻，我们现在提供了一个可以订阅的电子邮件列表！如果你不经常浏览 Reddit 或论坛，甚至不经常来我们的 &lt;a href=&quot;https://discord.gg/nxnCFkb&quot;&gt;Discord&lt;/a&gt;，我们现在提供了一个同样受欢迎的电子邮件列表的选项。只要在&lt;a href=&quot;https://www.freelists.org/list/alt-f4&quot;&gt;这里&lt;/a&gt;输入你的电子邮件地址，你就会在每周五最新一期发布时收到通知。当然，我们只会将此用于 Alt-F4 的更新，而不会给你发送垃圾邮件。&lt;/p&gt; &lt;h2 id=&quot;面向配方的异星工厂之道-phx&quot;&gt;面向配方的异星工厂之道 &lt;author&gt;Ph.X&lt;/author&gt;&lt;/h2&gt; &lt;p&gt;异星工厂有一个复杂的生产线网络（即意大利面条），这使得游戏充满了乐趣和挑战。其作为一个复杂的工程问题存在着与软件工程类似的挑战，因此我认为可以用一些源自现实世界经验来改善游戏体验。&lt;/p&gt; &lt;h3 id=&quot;什么是rofl&quot;&gt;什么是“ROFL”&lt;/h3&gt; &lt;p&gt;有编程经验的人应该听说过 &lt;del&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1&quot;&gt;面向对象编程&lt;/a&gt;&lt;/del&gt; &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B&quot;&gt;模块化编程&lt;/a&gt;，而这正是面向配方异星工厂之道（Recip-Oriented Factorio Life, ROFL）旨在模仿的理论。模块化编程，是强调将计算机程序的功能分离成独立的、可互换的“模块”的软件设计技术，它使得每个模块都包含着执行预期功能的一个唯一方面所必需的所有东西。在 ROFL 中，我们将整个工厂分离成独立的、可互换的“子工厂模块”，每个模块都包含了执行预期工厂的一个唯一配方必需的所有东西。&lt;/p&gt; &lt;p&gt;和大多数哲学一样，ROFL 试图找到一个永恒&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%A7%8B%E5%9F%BA&quot;&gt;始基&lt;/a&gt;作为一切事物的来源；在我们这里，我们选择的始基是配方。集成电路可以由任何级别的组装机制作，它可能会受到不同插件的影响，所需的原材料可能来自传送带、物流箱，甚至是相邻的铜线组装机，但无论其他条件如何变化，配方本身一直是铜线、电路板与塑料合成集成电路。配方有点像异星工厂中的原子操作：一个不可分割的，无法进一步分解的，最小单位。&lt;/p&gt; &lt;p&gt;根据一个特定的配方，将专用于实现该配方的子工厂打包成模块。一个单独的物流系统作为模块对外交互的接口为其获取原料和供应产品。这样划分的目的是为了实现模块内部的高内聚和模块之间的低耦合。模块内部的高内聚指模块包含了制作配方所需的所有设施（组装机、机械臂、传送带、电线杆、插件效果分享塔等等），让模块可以独立工作。模块之间的低耦合性意味着模块之间通过预定义的接口（如电力和铁路网）进行交互，没有直接的依赖关系，使得模块之间可以互换。&lt;/p&gt; &lt;p&gt;为了更好地实现这个想法，下面的例子中使用了&lt;a href=&quot;https://mods.factorio.com/mods/Optera/LogisticTrainNetwork&quot;&gt;物流列车网络（LTN - Logistic Train Network）&lt;/a&gt;、&lt;a href=&quot;https://mods.factorio.com/mod/aai-containers&quot;&gt;AAI 箱子和仓库（AAI Containers &amp;amp; Warehouses）&lt;/a&gt;和&lt;a href=&quot;https://mods.factorio.com/mod/miniloader&quot;&gt;迷你装卸机（Miniloader）&lt;/a&gt;Mod。以下所有例子的蓝图都可在&lt;a href=&quot;https://media.alt-f4.blog/ALTF4/28/rofl_example_blueprint.txt&quot;&gt;这里&lt;/a&gt;下载。&lt;/p&gt; &lt;h3 id=&quot;接口设计&quot;&gt;接口设计&lt;/h3&gt; &lt;p&gt;在实际建造任何子工厂模块之前，我们需要设计一个通用的物流网络作为模块之间的接口。虽然总线或物流机器人在一定程度上可以实现这样的物流系统，但街区式铁路网格在吞吐量、可重复使用性和纯粹的 &lt;em&gt;炫酷程度&lt;/em&gt; 上都远超过其他方案。&lt;/p&gt;...</content>
  </entry>
  
  
  
  <entry>
    <title>Alt-F4 #27 - 设计不必要的东西</title>
    <link href="https://alt-f4.blog/zh/ALTF4-27/" />
    <id>https://alt-f4.blog/ALTF4-27</id>
    <updated>2021-03-12T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;本周，pocarski 继续他的传送带疯狂之旅，来看看通用平衡器。其结果是如此疯狂而又无用，你应该知道我们是在享受这个过程！&lt;/p&gt; &lt;h2 id=&quot;通用-8-8完美平衡万物皆宜-pocarski&quot;&gt;通用 8-8：完美平衡，万物皆宜 &lt;author&gt;pocarski&lt;/author&gt;&lt;/h2&gt; &lt;p&gt;&lt;a href=&quot;https://alt-f4.blog/zh/ALTF4-23/#%E7%BA%AF%E4%BC%A0%E9%80%81%E5%B8%A6%E8%AE%A1%E7%AE%97%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E4%B8%8D%E5%A4%AA%E7%AE%80%E6%98%8E%E7%9A%84%E6%95%B0%E5%AD%A6-pocarski&quot;&gt;最近&lt;/a&gt;，我用传送带和分流器做了一堆电脑零件。本周我将继续我对移动物品的不健康的痴迷，制作一些至少能有点用处东西：平衡器。为什么我要写一整篇文章来设计一个平衡器呢？嗯，那是因为我们今天要做的这个平衡器可不一般！&lt;/p&gt; &lt;p&gt;这篇文章不会很深入地探讨平衡器的设计原理，因为我们将在大多数情况下使用预制且熟知的蓝图。然而，并非所有的平衡器皆生而平等，所以你需要了解一些术语：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;输入平衡&lt;/strong&gt;：均匀地从所有输入中提取。在将多个输入合并为较少的输出时尤其重要。&lt;/li&gt; &lt;li&gt;&lt;strong&gt;输出平衡&lt;/strong&gt;：均匀分配给所有输出。当把几个输入分割成更多输出时尤其重要。&lt;/li&gt; &lt;li&gt;&lt;strong&gt;有限吞吐量&lt;/strong&gt;：存在内部瓶颈。一个有限吞吐量系统的例子是将两条传送带合并成一条，然后再将其分割成两条。这样的一个系统即使在输入和输出上都有两条传送带，但最大吞吐量只有一条传送带。&lt;/li&gt; &lt;li&gt;&lt;strong&gt;无限吞吐量&lt;/strong&gt;：与有限吞吐量相反，不存在内部瓶颈。如果 &lt;em&gt;能&lt;/em&gt; 通过 X 条传送带，它们就 &lt;em&gt;会&lt;/em&gt; 通过。&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;本文中的所有蓝图（还有一些额外的内容）都可以在&lt;a href=&quot;https://media.alt-f4.blog/ALTF4/27/8to8blueprint.txt&quot;&gt;这里&lt;/a&gt;下载。&lt;/p&gt; &lt;h3 id=&quot;前提&quot;&gt;前提&lt;/h3&gt; &lt;p&gt;想象一下下面的情景：你作为一个新手，刚刚听说了那些被称为“平衡器”的玩意儿以及它们的功能。你想把一条传送带平衡成三条。你本应该使用 1-3 的平衡器，但你还不知道这些，所以，你尝试使用 4-4 的平衡器，但只连接一个输入和三个输出。然而这么做得到的并非预期的 1:1:1 的输出比例，而是 1:1:2 的比例，令你大失所望。&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- Spacing --&gt;&lt;/p&gt; &lt;div class=&quot;image&quot;&gt; &lt;img src=&quot;https://media.alt-f4.blog/ALTF4/27/failed_1-3_compressed.jpg&quot; alt=&quot;如何错误的使用平衡器&quot; style=&quot;max-width: ; max-height: &quot; /&gt; &lt;/div&gt; &lt;p&gt;&lt;/p&gt;...</content>
  </entry>
  
  
</feed>